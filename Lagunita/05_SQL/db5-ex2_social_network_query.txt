Q1: Find the names of all students who are friends with someone named Gabriel.
A1: select hs1.name from
        highschooler hs1
        join
        highschooler hs2
        join
        friend
        where hs2.name = "Gabriel" and hs1.id = id1 and hs2.id = id2
 
Q2: For every student who likes someone 2 or more grades younger than themselves, return that student's 
    name and grade, and the name and grade of the student they like.
A2:
select hs1.name, hs1.grade, hs2.name, hs2.grade from
      highschooler hs1
      join
      highschooler hs2 
      join 
      likes
      where hs1.id = id1 and hs2.id = id2 and hs2.grade +2 <= hs1.grade

Q3: For every pair of students who both like each other, return the name and grade of both students. 
    Include each pair only once, with the two names in alphabetical order. 
A3:
select hs1.name, hs1.grade, hs2.name, hs2.grade from
    highschooler hs1
    join
    highschooler hs2
    join
    (select l1.id1 as id1, l2.id1 as id2 from
        likes l1
        join
        likes l2
        where l1.id1 = l2.id2 and l1.id2 = l2.id1) ids
where hs1.id = ids.id1 and hs2.id = ids.id2 and hs1.name < hs2.name

Q4: Find all students who do not appear in the Likes table (as a student who likes or is liked) and return  
    their names and grades. Sort by grade, then by name within each grade. 
A4:
select name, grade from highschooler 
where id not in
(select id1 as id from likes union select id2 as id from likes)
order by grade, name

Q5: For every situation where student A likes student B, but we have no information about whom B likes 
    (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 
A5:
select hs1.name, hs1.grade, hs2.name, hs2.grade
from
    highschooler hs1
    join 
    highschooler hs2
    join 
    likes
where hs1.id = id1 
    and hs2.id = id2 
    and hs2.id not in (select id1 from likes)

Q6: Find names and grades of students who only have friends in the same grade. Return the result sorted by 
    grade, then by name within each grade. 
A6:
select name, grade from highschooler hs1
where not exists (select * from friend join highschooler hs2
                        where id1 = hs2.id and id2=hs1.id and hs2.grade <> hs1.grade)
order by grade, name


Q7: For each student A who likes a student B where the two are not friends,
    find if they have a friend C in common (who can introduce them!). For all such
    trios, return the name and grade of A, B, and C. 
A7: 
select hs1.id as id1, hs1.name as name1, hs1.grade as grade1, hs2.id as id2, hs2.name as name2, hs2.grade as grade2 from
    highschooler hs1
    join
    highschooler hs2
    join
    likes
    where hs1.id = id1 
          and hs2.id = id2 
          and not exists (select * from friend where id1=hs1.id and id2=hs2.id)) P
join 
friend f1
join friend f2
join highschooler hs3
where P.id1 = f1.id1 and P.id2 = f2.id1 and f1.id2 = f2.id2 and f2.id2 = hs3.id

Q8: Find the difference between the number of students in the school and the number of different first 
    names. 
A8: 
select n_students - n_names
from (select count(*) as n_students from highschooler), 
     (select count(distinct name) as n_names from highschooler)

Q9: Find the name and grade of all students who are liked by more than one other student. 
A9: 
select name, grade 
from highschooler hs 
        join 
     (select id2, count(*) as ct from likes group by id2) l
where id = id2 and l.ct > 1
